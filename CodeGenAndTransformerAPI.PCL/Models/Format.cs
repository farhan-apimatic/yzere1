/*
 * CodeGenAndTransformerAPI.PCL
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */
using System;
using System.Linq;
using System.Collections.Generic;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using CodeGenAndTransformerAPI.PCL;
using CodeGenAndTransformerAPI.PCL.Utilities;

namespace CodeGenAndTransformerAPI.PCL.Models
{
    [JsonConverter(typeof(StringValuedEnumConverter))]
    public enum Format
    {
        ENUM_API_BLUEPRINT, //TODO: Write general description for this method
        ENUM_GOOGLE_DISCOVERY, //TODO: Write general description for this method
        RAML, //TODO: Write general description for this method
        WADL, //TODO: Write general description for this method
        SWAGGER, //TODO: Write general description for this method
        ENUM_IO_DOCS, //TODO: Write general description for this method
        APIMATIC, //TODO: Write general description for this method
        WSDL, //TODO: Write general description for this method
        MASHAPE, //TODO: Write general description for this method
        POSTMAN, //TODO: Write general description for this method
        HAR, //TODO: Write general description for this method
        OPEN_API_SPEC_300_RC1, //TODO: Write general description for this method
    }

    /// <summary>
    /// Helper for the enum type Format
    /// </summary>
    public static class FormatHelper
    {
        //string values corresponding the enum elements
        private static List<string> stringValues = new List<string> { "API Blueprint", "Google Discovery", "RAML", "WADL", "Swagger", "IO Docs", "APIMATIC", "WSDL", "Mashape", "Postman", "HAR", "OpenApi3" };

        /// <summary>
        /// Converts a Format value to a corresponding string value
        /// </summary>
        /// <param name="enumValue">The Format value to convert</param>
        /// <returns>The representative string value</returns>
        public static string ToValue(Format enumValue)
        {
            switch(enumValue)
            {
                //only valid enum elements can be used
                //this is necessary to avoid errors
                case Format.ENUM_API_BLUEPRINT:
                case Format.ENUM_GOOGLE_DISCOVERY:
                case Format.RAML:
                case Format.WADL:
                case Format.SWAGGER:
                case Format.ENUM_IO_DOCS:
                case Format.APIMATIC:
                case Format.WSDL:
                case Format.MASHAPE:
                case Format.POSTMAN:
                case Format.HAR:
                case Format.OPEN_API_SPEC_300_RC1:
                    return stringValues[(int)enumValue];

                //an invalid enum value was requested
                default:
                    return null;
            }
        }

        /// <summary>
        /// Convert a list of Format values to a list of strings
        /// </summary>
        /// <param name="enumValues">The list of Format values to convert</param>
        /// <returns>The list of representative string values</returns>
        public static List<string> ToValue(List<Format> enumValues)
        {
            if (null == enumValues)
                return null;

            return enumValues.Select(eVal => ToValue(eVal)).ToList();
        }

        /// <summary>
        /// Converts a string value into Format value
        /// </summary>
        /// <param name="value">The string value to parse</param>
        /// <returns>The parsed Format value</returns>
        public static Format ParseString(string value)
        {
            int index = stringValues.IndexOf(value);
            if(index < 0)
                throw new InvalidCastException(string.Format("Unable to cast value: {0} to type Format", value));

            return (Format) index;
        }
    }
} 