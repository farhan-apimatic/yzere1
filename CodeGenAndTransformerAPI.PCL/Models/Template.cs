/*
 * CodeGenAndTransformerAPI.PCL
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */
using System;
using System.Linq;
using System.Collections.Generic;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using CodeGenAndTransformerAPI.PCL;
using CodeGenAndTransformerAPI.PCL.Utilities;

namespace CodeGenAndTransformerAPI.PCL.Models
{
    [JsonConverter(typeof(StringValuedEnumConverter))]
    public enum Template
    {
        CS_PORTABLE_NET_LIB, //TODO: Write general description for this method
        JAVA_ECLIPSE_JRE_LIB, //TODO: Write general description for this method
        JAVA_GRADLE_ANDROID_LIB, //TODO: Write general description for this method
        OBJC_COCOA_TOUCH_IOS_LIB, //TODO: Write general description for this method
        ANGULAR_JAVASCRIPT_LIB, //TODO: Write general description for this method
        RUBY_GENERIC_LIB, //TODO: Write general description for this method
        ENUM_PYTHON_GENERIC_LIB, //TODO: Write general description for this method
        ENUM_PHP_GENERIC_LIB, //TODO: Write general description for this method
        ENUM_NODE_JAVASCRIPT_LIB, //TODO: Write general description for this method
        ENUM_GO_GENERIC_LIB, //TODO: Write general description for this method
    }

    /// <summary>
    /// Helper for the enum type Template
    /// </summary>
    public static class TemplateHelper
    {
        //string values corresponding the enum elements
        private static List<string> stringValues = new List<string> { "cs_portable_net_lib", "java_eclipse_jre_lib", "java_gradle_android_lib", "objc_cocoa_touch_ios_lib", "angular_javascript_lib", "ruby_generic_lib", "python_generic_lib", "php_generic_lib", "node_javascript_lib", "go_generic_lib" };

        /// <summary>
        /// Converts a Template value to a corresponding string value
        /// </summary>
        /// <param name="enumValue">The Template value to convert</param>
        /// <returns>The representative string value</returns>
        public static string ToValue(Template enumValue)
        {
            switch(enumValue)
            {
                //only valid enum elements can be used
                //this is necessary to avoid errors
                case Template.CS_PORTABLE_NET_LIB:
                case Template.JAVA_ECLIPSE_JRE_LIB:
                case Template.JAVA_GRADLE_ANDROID_LIB:
                case Template.OBJC_COCOA_TOUCH_IOS_LIB:
                case Template.ANGULAR_JAVASCRIPT_LIB:
                case Template.RUBY_GENERIC_LIB:
                case Template.ENUM_PYTHON_GENERIC_LIB:
                case Template.ENUM_PHP_GENERIC_LIB:
                case Template.ENUM_NODE_JAVASCRIPT_LIB:
                case Template.ENUM_GO_GENERIC_LIB:
                    return stringValues[(int)enumValue];

                //an invalid enum value was requested
                default:
                    return null;
            }
        }

        /// <summary>
        /// Convert a list of Template values to a list of strings
        /// </summary>
        /// <param name="enumValues">The list of Template values to convert</param>
        /// <returns>The list of representative string values</returns>
        public static List<string> ToValue(List<Template> enumValues)
        {
            if (null == enumValues)
                return null;

            return enumValues.Select(eVal => ToValue(eVal)).ToList();
        }

        /// <summary>
        /// Converts a string value into Template value
        /// </summary>
        /// <param name="value">The string value to parse</param>
        /// <returns>The parsed Template value</returns>
        public static Template ParseString(string value)
        {
            int index = stringValues.IndexOf(value);
            if(index < 0)
                throw new InvalidCastException(string.Format("Unable to cast value: {0} to type Template", value));

            return (Template) index;
        }
    }
} 